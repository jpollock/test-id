// This is the public API offered by your entity.
syntax = "proto3";

import "google/protobuf/empty.proto";
import "akkaserverless/annotations.proto";
import "google/api/annotations.proto";

package com.example;

message CreateCounter {
  int32 initial_value = 1;
}

message IncreaseValue {
  string counter_id = 1 [(akkaserverless.field).entity_key = true];
  int32 value = 2;
}

message DecreaseValue {
  string counter_id = 1 [(akkaserverless.field).entity_key = true];
  int32 value = 2;
}

message ResetValue {
  string counter_id = 1 [(akkaserverless.field).entity_key = true];
}

message GetCounter {
  string counter_id = 1 [(akkaserverless.field).entity_key = true];
}

message CurrentCounter {
  string counter_id = 1 [(akkaserverless.field).entity_key = true];
  int32 value = 2;
}

service CounterService {
  option (akkaserverless.codegen) = {
    value_entity: {
      name: "com.example.domain.Counter"
      entity_type: "counter"
      state: "com.example.domain.CounterState"
    }
  };

  // using new entity key generator approach, which means, if you're creating
  // entities, you can let the product generate a key for you.
  rpc Create(CreateCounter) returns (CurrentCounter) {
    option (akkaserverless.method).entity.key_generator = VERSION_4_UUID;
  }

  rpc Increase(IncreaseValue) returns (google.protobuf.Empty);
  rpc Decrease(DecreaseValue) returns (google.protobuf.Empty);
  rpc Reset(ResetValue) returns (google.protobuf.Empty);
  rpc GetCurrentCounter(GetCounter) returns (CurrentCounter);
}
